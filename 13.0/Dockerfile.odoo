# This image is designed to be used with Cetmix Tower <https://cetmix.com/tower>
# However it can be used for standalone deployments too.
# Parts of both Odoo and OCA Docker files are being used. 
# 
# This image contains build Odoo core image tools for adding extra addons.
FROM python:3.8-slim-bookworm

ARG ODOO_VERSION=13.0
ARG DOCKER_ODOO_UID=9999  
ARG DOCKER_ODOO_GID=9999
ARG POSTGRES_VERSION=14
ARG TARGETARCH
ENV PIP_NO_CACHE_DIR=1
# This token will be used to clone private GitHub repos
ARG GITHUB_TOKEN=<token>
ARG TMP_ADDONS_DIR=/tmp/getaddons

# Possible values: "ce" for community edition, "ee" for enterprise edition
ARG ODOO_EDITION=ce

SHELL ["/bin/bash", "-xo", "pipefail", "-c"]

# Generate locale C.UTF-8 for postgres and general locale data
ENV LANG=C.UTF-8

# Install dependencies as describe in Odoo documentation
# https://www.odoo.com/documentation/13.0/administration/install/install.html#setup-install-source-linux-git
# We also install  virtualenv package which will be created lated to create virtual environment and some dependencies needed for building packages

RUN apt-get update -qq && DEBIAN_FRONTEND=noninteractive apt-get install -qq --no-install-recommends curl python3-pip libldap2-dev libpq-dev libsasl2-dev \
    python3-dev python3-virtualenv build-essential gnupg npm git \
    # OCA extra deps 
    # for lxml
    libxml2-dev \
    libxslt1-dev \
    libz-dev \
    libxmlsec1-dev \
    # for pycups
    libcups2-dev \
    # some other build tools
    swig \
    libffi-dev \
    pkg-config

# Install wkhtmltopdf
RUN if [ -z "${TARGETARCH}" ]; then \
    TARGETARCH="$(dpkg --print-architecture)"; \
    fi; \
    curl -sSL https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-3/wkhtmltox_0.12.6.1-3.bookworm_${TARGETARCH}.deb -o /tmp/wkhtml.deb \
    && apt-get update -qq \
    && dpkg --force-depends -i /tmp/wkhtml.deb \
    && DEBIAN_FRONTEND=noninteractive apt-get install -qq -f --no-install-recommends \
    && rm /tmp/wkhtml.deb

    # Install latest version of the PG client
RUN curl -sSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
    && echo "deb http://apt.postgresql.org/pub/repos/apt/ bookworm-pgdg main" > /etc/apt/sources.list.d/pgclient.list \
    && apt-get update -qq \
    && DEBIAN_FRONTEND=noninteractive apt-get install -qq postgresql-client-${POSTGRES_VERSION}

# Install nodejs dependencies
RUN npm install -g rtlcss


# Enable VENV
ENV VIRTUAL_ENV=/opt/odoo-venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Install tools needed for custom addons installation
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir "setuptools<58" wheel manifestoo git-aggregator click-odoo

# Install Odoo python dependencies
COPY requirements.txt /tmp/requirements.txt
RUN  pip install -r /tmp/requirements.txt

# Add "odoo" user. We use same guid uid as in the official Odoo image
RUN groupadd --gid ${DOCKER_ODOO_GID} odoo && useradd odoo -u ${DOCKER_ODOO_UID} -g ${DOCKER_ODOO_GID} -m -s /bin/bash

# Copy entrypoint script and Odoo configuration file
COPY ./entrypoint.sh /
COPY wait-for-psql.py /usr/local/bin/wait-for-psql.py

# Install Odoo (use ADD for correct layer caching)
# In case we need to clone specific release
ARG ODOO_HEAD=${ODOO_VERSION}
ARG ODOO_ORG_REPO=odoo/odoo
RUN mkdir /tmp/getodoo \
    && (curl -sSL https://github.com/$ODOO_ORG_REPO/tarball/$ODOO_HEAD | tar -C /tmp/getodoo -xz) \
    && mv /tmp/getodoo/* /opt/odoo \
    && rmdir /tmp/getodoo
    
# Install Odoo EE
ARG ODOO_EE_REPO=odoo/enterprise
ARG ODOO_HEAD_EE=${ODOO_VERSION}

RUN if [ "$ODOO_EDITION" = "ee" ]; then \
    mkdir /tmp/getodoo \
    && (curl -sSL https://${GITHUB_TOKEN}:x-oauth-basic@github.com/$ODOO_EE_REPO/tarball/$ODOO_HEAD_EE | tar -C /tmp/getodoo -xz) \
    && mv /tmp/getodoo/* /tmp/getodoo/odoo_ee \
    && mv /tmp/getodoo/odoo_ee/* /opt/odoo/addons \
    && rm -rf /tmp/getodoo; \
    fi

# Install Odoo
RUN pip install --no-cache-dir -e /opt/odoo --config-setting=editable-mode=compat

# Create odoo config file 
RUN printf "[options]\ndata_dir = /var/lib/odoo\n" > /etc/odoo.conf && chown odoo /etc/odoo.conf

# Create directories for extra addons and filestore, set ownership to `odoo`
ENV ADDONS_LOCATION=/opt/odoo/addons
RUN mkdir -p $TMP_ADDONS_DIR/addons \
    && chown odoo $ADDONS_LOCATION \
    && mkdir -p /var/lib/odoo && chown odoo /var/lib/odoo

# Expose filestore
VOLUME ["/var/lib/odoo"]

# Expose Odoo services
EXPOSE 8069 8071 8072

# Set the default config file
ENV ODOO_RC=/etc/odoo.conf

# Set default user when running the container
USER odoo

ENTRYPOINT ["/entrypoint.sh"]
CMD ["odoo"]